import os
import logging
import sqlite3
import time
from typing import Dict, List
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, 
    CommandHandler, 
    MessageHandler, 
    CallbackQueryHandler,
    ContextTypes,
    filters
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
BOT_USERNAME = ""
CHANNEL_ID = "-1002573803802"
ADMIN_CHAT_IDS = [int(id.strip()) for id in os.getenv('ADMIN_CHAT_IDS', '').split(',') if id.strip()]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    with sqlite3.connect("messages.db") as db:
        db.execute("""
            CREATE TABLE IF NOT EXISTS messages (
                id INTEGER PRIMARY KEY,
                type TEXT,
                text TEXT,
                file_id TEXT,
                caption TEXT,
                status TEXT DEFAULT 'pending'
            )
        """)
        db.commit()

def get_next_id():
    with sqlite3.connect("messages.db") as db:
        cursor = db.execute("SELECT MAX(id) FROM messages")
        max_id = cursor.fetchone()[0]
        return (max_id or 0) + 1

def save_message(msg_id, msg_data):
    with sqlite3.connect("messages.db") as db:
        db.execute("""
            INSERT INTO messages (id, type, text, file_id, caption, status)
            VALUES (?, ?, ?, ?, ?, ?)
        """, (msg_id, msg_data['type'], msg_data.get('text'), msg_data.get('file_id'), msg_data.get('caption'), 'pending'))
        db.commit()

def load_message(msg_id):
    with sqlite3.connect("messages.db") as db:
        cursor = db.execute("SELECT * FROM messages WHERE id = ?", (msg_id,))
        row = cursor.fetchone()
        if row:
            return {'type': row[1], 'text': row[2], 'file_id': row[3], 'caption': row[4], 'status': row[5]}
        return None

def update_message_status(msg_id, status):
    with sqlite3.connect("messages.db") as db:
        db.execute("UPDATE messages SET status = ? WHERE id = ?", (status, msg_id))
        db.commit()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞
def get_admin_keyboard(msg_id: int, content_type: str):
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"approve_{msg_id}_{content_type}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{msg_id}")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
def create_text_admin_message(user, text):
    return (
        f"üîí –ù–æ–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n"
        f"üë§ –û—Ç: {user.first_name}\n"
        f"üÜî ID: {user.id}\n"
        f"üìß @{user.username if user.username else '–Ω–µ—Ç'}\n\n"
        f"üí¨ –¢–µ–∫—Å—Ç: {text}"
    )

def create_media_admin_message(user, media_type):
    return (
        f"üîí –ù–æ–≤–æ–µ –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n"
        f"üë§ –û—Ç: {user.first_name}\n"
        f"üÜî ID: {user.id}\n"
        f"üìß @{user.username if user.username else '–Ω–µ—Ç'}\n\n"
        f"üì¶ –¢–∏–ø: {media_type}"
    )

async def send_media_content(context, chat_id, content_type, file_id, caption, msg_id):
    if content_type == "photo":
        await context.bot.send_photo(
            chat_id=chat_id,
            photo=file_id,
            caption=caption,
            reply_markup=get_admin_keyboard(msg_id, content_type)
        )
    elif content_type == "video":
        await context.bot.send_video(
            chat_id=chat_id,
            video=file_id,
            caption=caption,
            reply_markup=get_admin_keyboard(msg_id, content_type)
        )
    elif content_type == "animation":
        await context.bot.send_animation(
            chat_id=chat_id,
            animation=file_id,
            caption=caption,
            reply_markup=get_admin_keyboard(msg_id, content_type)
        )

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    
    welcome_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∫—Ä–∞—Å–Ω–æ–≥–æ –¥–∏—Å–ø–∞—Ç—á–∞.\n\n"
        "üì® –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü—É –∫–∞–Ω–∞–ª–∞.\n"
        "üîí –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–Ω–æ–Ω–∏–º–Ω—ã.\n\n"
        "‚ö°Ô∏è –ù–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!"
    )
    
    await update.message.reply_text(welcome_text)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        if update.message.text:
            content_type = "text"
            content = update.message.text
            admin_message = create_text_admin_message(user, content)
            msg_data = {'type': 'text', 'text': content}
            
        elif update.message.photo:
            content_type = "photo" 
            content = update.message.photo[-1].file_id
            admin_message = create_media_admin_message(user, "üì∑ –§–æ—Ç–æ")
            msg_data = {'type': 'photo', 'file_id': content, 'caption': update.message.caption or ''}
            
        elif update.message.video:
            content_type = "video"
            content = update.message.video.file_id
            admin_message = create_media_admin_message(user, "üé• –í–∏–¥–µ–æ")
            msg_data = {'type': 'video', 'file_id': content, 'caption': update.message.caption or ''}
            
        elif update.message.animation:
            content_type = "animation"
            content = update.message.animation.file_id
            admin_message = create_media_admin_message(user, "üé¨ GIF")
            msg_data = {'type': 'animation', 'file_id': content, 'caption': update.message.caption or ''}
            
        else:
            await update.message.reply_text("‚ùå –≠—Ç–æ—Ç —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        msg_id = get_next_id()
        save_message(msg_id, msg_data)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞–º
        for admin_id in ADMIN_CHAT_IDS:
            if content_type == "text":
                await context.bot.send_message(
                    chat_id=admin_id,
                    text=admin_message,
                    reply_markup=get_admin_keyboard(msg_id, content_type),
                    parse_mode='HTML'
                )
            else:
                await send_media_content(context, admin_id, content_type, content, admin_message, msg_id)
        
        await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    data = query.data
    parts = data.split('_')
    
    if data.startswith('approve_'):
        msg_id = int(parts[1])
        content_type = parts[2]
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã
        msg_data = load_message(msg_id)
        if not msg_data:
            await query.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –±—ã–ª–æ –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        if msg_data['status'] != 'pending':
            await query.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ!", show_alert=True)
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª
        try:
            if content_type == "text":
                await context.bot.send_message(
                    chat_id=CHANNEL_ID,
                    text=f"üì® –ê–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n<blockquote>{msg_data['text']}</blockquote>\n\nüëâ <a href=\"https://t.me/dispatchbdl_bot?start=send\">–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ</a>",
                    parse_mode='HTML'
                )
            elif content_type == "photo":
                await context.bot.send_photo(
                    chat_id=CHANNEL_ID,
                    photo=msg_data['file_id'],
                    caption=f"üì® –ê–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n{msg_data.get('caption', '')}\n\nüëâ <a href=\"https://t.me/dispatchbdl_bot?start=send\">–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ</a>",
                    parse_mode='HTML'
                )
            elif content_type == "video":
                await context.bot.send_video(
                    chat_id=CHANNEL_ID,
                    video=msg_data['file_id'],
                    caption=f"üì® –ê–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n{msg_data.get('caption', '')}\n\nüëâ <a href=\"https://t.me/dispatchbdl_bot?start=send\">–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ</a>",
                    parse_mode='HTML'
                )
            elif content_type == "animation":
                await context.bot.send_animation(
                    chat_id=CHANNEL_ID,
                    animation=msg_data['file_id'],
                    caption=f"üì® –ê–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n{msg_data.get('caption', '')}\n\nüëâ <a href=\"https://t.me/dispatchbdl_bot?start=send\">–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ</a>",
                    parse_mode='HTML'
                )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ
            update_message_status(msg_id, 'approved')
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É –∞–¥–º–∏–Ω–∞
            await query.edit_message_text(
                text=query.message.text + "\n\n‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª–µ!",
                reply_markup=None
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª: {e}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª!", show_alert=True)
    
    elif data.startswith('reject_'):
        msg_id = int(parts[1])
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ
        update_message_status(msg_id, 'rejected')
        
        await query.edit_message_text(
            text=query.message.text + "\n\n‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.",
            reply_markup=None
        )

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
async def post_init(application: Application):
    global BOT_USERNAME
    init_db()
    bot_info = await application.bot.get_me()
    BOT_USERNAME = bot_info.username
    print(f"ü§ñ –ë–æ—Ç @{BOT_USERNAME} –∑–∞–ø—É—â–µ–Ω!")
    print(f"üë• –ê–¥–º–∏–Ω—ã: {ADMIN_CHAT_IDS}")
    print(f"üì¢ –ö–∞–Ω–∞–ª: {CHANNEL_ID}")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    application = Application.builder().token(os.getenv('BOT_TOKEN')).post_init(post_init).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(MessageHandler(filters.PHOTO | filters.VIDEO | filters.ANIMATION, handle_message))
    application.add_handler(CallbackQueryHandler(button_handler))
    
    print("üü¢ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    application.run_polling()

if __name__ == "__main__":
    main()